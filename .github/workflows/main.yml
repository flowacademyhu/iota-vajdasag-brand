# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events for all branches
  push:
    branches: 
      - '**'
  pull_request:
    branches:
      - '**'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build-frontend:
    name: Build frontend
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash
        working-directory: frontend

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('frontend/package-lock.json') }}

      - name: Install dependencies
        run: npm ci

      - name: Check code style
        run: npm run code-style

      - name: Test frontend
        run: npm test -- --coverage

      - name: Archive code coverage results
        uses: actions/upload-artifact@v2
        with:
          name: code-coverage-report
          path: frontend/coverage/lcov-report

      - name: Build frontend
        run: npm run build

      - name: Archive frontend bundle
        uses: actions/upload-artifact@v2
        with:
          name: iota-vajdasag-brand-frontend
          path: frontend/build
  
  build-backend:
    name: Build backend
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: backend
    env:
      IMAGE_NAME: gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_APP_NAME }}:${{ github.sha }}
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v2

      - name: Setup GCloud
        uses: google-github-actions/setup-gcloud@master
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_email: ${{ secrets.GCP_EMAIL }}
          service_account_key: ${{ secrets.GCP_CREDENTIALS }}

      - name: Configure Docker
        run: gcloud auth configure-docker --quiet

      - name: Build Docker image
        run: docker build . -t $IMAGE_NAME

      - name: Push Docker image
        run: docker push $IMAGE_NAME

  build-keycloak:
    name: Build Keycloak
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: backend/keycloak
    env:
      IMAGE_NAME: gcr.io/${{ secrets.GCP_PROJECT_ID }}/keycloak:${{ github.sha }}
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v2

      - name: Setup GCloud
        uses: google-github-actions/setup-gcloud@master
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_email: ${{ secrets.GCP_EMAIL }}
          service_account_key: ${{ secrets.GCP_CREDENTIALS }}

      - name: Configure Docker
        run: gcloud auth configure-docker --quiet

      - name: Build Docker image
        run: docker build . -t $IMAGE_NAME

      - name: Push Docker image
        run: docker push $IMAGE_NAME

  test-backend:
    name: Test backend
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: backend
    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Start keycloak
        run: docker-compose run -d --service-ports keycloak

      - name: Wait until keycloak is up
        uses: nev7n/wait_for_response@v1
        with:
          url: 'http://localhost:8180/auth'
          responseCode: 200
          timeout: 30000
          interval: 500

      - name: Run maven test
        run: mvn -B clean test

  deploy_staging:

    name: Deploy to staging
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_APP_NAME }}:${{ github.sha }}
      KEYCLOAK_IMAGE_NAME: gcr.io/${{ secrets.GCP_PROJECT_ID }}/keycloak:${{ github.sha }}
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    needs: [build-frontend, build-backend, build-keycloak, test-backend]
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
      
      - name: Setup GCloud
        uses: google-github-actions/setup-gcloud@master
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_email: ${{ secrets.GCP_EMAIL }}
          service_account_key: ${{ secrets.GCP_CREDENTIALS }}
          
      - name: Deploy to Cloud Run
        run: gcloud run deploy ${{ secrets.GCP_APP_NAME }} --image=$IMAGE_NAME --platform managed --region europe-west1
          
      - name: Deploy Keycloak to Cloud Run
        run: gcloud run deploy keycloak --image=$KEYCLOAK_IMAGE_NAME --platform managed --region europe-west1

      - name: Get artifacts
        uses: actions/download-artifact@v2
        with:
          name: iota-vajdasag-brand-frontend
          path: frontend/build
      - name: Deploy to Firebase
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: '${{ secrets.GCP_CREDENTIALS }}'
          channelId: live
          projectId: iota-vajdasag-brand-b3e95c95
        env:
          FIREBASE_CLI_PREVIEWS: hostingchannels
